#? strip | stdtmpl(emit = "stdout.write")
#
# type RiscV = ref object of Emitter
# method writeHeader(self: RiscV) =
  .data
  cells:
    .space 30000

  .global _start
  _start:
    ## initialize a pointer to cells
    la a1, cells
# end method
#
# method writeInstruction(self: RiscV, instr: Instruction, i: var int) =
# case instr.command:
  # of MoveRight:
    ## move the pointer instr.n cells to the right
    addi a1, a1, ${instr.n}
  # of MoveLeft:
    addi a1, a1, ${-instr.n}
  # of Add:
    ## put the first byte at the pointer into t1 register
    lbu t1, (a1)
    ## add instr.n to the byte
    addi t1, t1, ${instr.n}
    ## write the changes back into the cell at the pointer
    sb t1, (a1)
  # of Sub:
    lbu t1, (a1)
    addi t1, t1, ${-instr.n}
    sb t1, (a1)
  # of Write:
    ## put the function 'write'(64) into a7 register
    li a7, 64
    ## first arg is the stdout (file descriptor 1)
    li a0, 1
    ## second arg is the cell pointer
    mv a1, a1
    ## third arg is the cell size
    li a2, 1
    ## execute it instr.n
    # for n in 1..instr.n:
      ecall
    # end for
  # of Read:
    ## put the function 'read' (63) into a7 register
    li a7, 63
    ## first arg is the stdin (file descriptor 0)
    li a0, 0
    mv a1, a1
    li a2, 1
    # for n in 1..instr.n:
      ecall
    # end for
  # of LoopStart:
    ## custom label to indicate the start of a loop
    loop_${i}:
      lbu t1, (a1)
      ## if t1 == 0, jump to the label corresponding to the end of the loop
      beqz t1, loop_${instr.i}
  # of LoopEnd:
    loop_${i}:
      lbu t1, (a1)
      ## if t1 != 0, jump to the label corresponding to the start of the loop
      bnez t1, loop_${instr.i}
# end case
# end method
#
# method writeFooter(self: RiscV) =
  ## put sys_exit() (at index 93) in a7 register
	li a7, 93
  ## first arg is the exit code
  li a0, 0
  ecall
# end method
