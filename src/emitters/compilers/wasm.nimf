#? strip | stdtmpl(emit = "stdout.write", subsChar='~')
#
# type Wasm = ref object of Emitter
# method writeHeader(self: Wasm) =
(module
  (import "wasi_snapshot_preview1" "fd_write"
    (func $fd_write (param i32 i32 i32 i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_read"
    (func $fd_read (param i32 i32 i32 i32) (result i32)))
  (import "wasi_snapshot_preview1" "proc_exit"
    (func $proc_exit (param i32)))

  ## 1 = 65536 byte
  (memory 1)
  ## export the memory segment by index as "memory"
  (export "memory" (memory 0))

  (func $_start (export "_start") (local $pointer i32)
    (local.set $pointer (i32.const 12))

    ##create iovec (needed for fd_write and fd_read)
    ## set iov.iov_base, first arg: mem address, second arg: start of "cells"
    (i32.store (i32.const 0) (local.get $pointer))
    ## set iov.iov_len, first arg: mem address, second arg: size of the buffer
    (i32.store (i32.const 4) (i32.const 1))
# end method
#
# method writeInstruction(self: Wasm, instr: Instruction, i: var int) =
# case instr.command:
  # of MoveRight:
    (local.set $pointer
      (i32.add (local.get $pointer) (i32.const ~{instr.n})))
  # of MoveLeft:
    (local.set $pointer
      (i32.sub (local.get $pointer) (i32.const ~{instr.n})))
  # of Add:
    ## store8 means store 1 byte
    (i32.store8
      (local.get $pointer)
      (i32.add
        ## load8_u loads an unassigned byte from a mem address
        (i32.load8_u (local.get $pointer))
        (i32.const ~{instr.n})))
  # of Sub:
    (i32.store8
      (local.get $pointer)
      (i32.sub
        (i32.load8_u (local.get $pointer))
        (i32.const ~{instr.n})))
  # of Write:
    ## update the pointer location for iovec
    (i32.store (i32.const 0) (local.get $pointer))
    # for n in 1..instr.n:
      (call $fd_write
        ## first arg is file descriptor (1 for stdout)
        (i32.const 1)
        ## second arg is mem address of iovec
        (i32.const 0)
        ## third arg is iovec.iov_len
        (i32.const 1)
        ## fourth arg is an address to store the number of bytes written
        (i32.const 8))
      drop
    # end for
  # of Read:
    ## update the pointer location for iovec
    (i32.store (i32.const 0) (local.get $pointer))
    # for n in 1..instr.n:
      (call $fd_read
        ## first arg is file descriptor (0 for stdin)
        (i32.const 0)
        ## second arg is mem address of iovec
        (i32.const 0)
        ## third arg is iovec.iov_len
        (i32.const 1)
        ## fourth arg is an address to store the number of bytes written
        (i32.const 8))
      drop
    # end for
  # of LoopStart:
    block
      loop
        (i32.eqz (i32.load8_u (local.get $pointer)))
        br_if 1
  # of LoopEnd:
        (i32.load8_u (local.get $pointer))
        br_if 0
      end
    end
# end case
# end method
#
# method writeFooter(self: Wasm) =
    (call $proc_exit (i32.const 0))
  )
)
# end method
