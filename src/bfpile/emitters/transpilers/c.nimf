#? strip | stdtmpl(emit = "stdout.write")
#
# type C = ref object of Emitter
#
# method writeHeader(self: C) =
    # stdout.writeLine("#include <unistd.h>")

    int main() {
      int cells[${cellsLen}] = {0};
      int* ptr = cells;
# end method
#
# method writeInstruction(self: C, instr: Instruction, _: var int) =
# case instr.command:
  # of MoveRight:
      ptr += ${instr.n};
  # of MoveLeft:
      ptr -= ${instr.n};
  # of Add:
      *ptr += ${instr.n};
  # of Sub:
      *ptr -= ${instr.n};
  # of Write:
    # for n in 1..instr.n:
        write(1, ptr, 1);
    # end for
  # of Read:
    # for n in 1..instr.n:
        read(0, ptr, 1);
    # end for
  # of LoopStart:
      while (*ptr) {
  # of LoopEnd:
      }
# end case
# end method
#
# method writeFooter(self: C) =
  }
# end method
