#? strip | stdtmpl(emit = "stdout.write")
#
# type Arm = ref object of Emitter
#
# method writeHeader(self: Arm) =
  .data
  cells:
    .space ${cellsLen}

  .text
  .global _start
  _start:
    ## store the pointer to cells in x1 register
    ldr x1, =cells
# end method
#
# method writeInstruction(self: Arm, instr: Instruction, i: var int) =
# case instr.command:
  # of MoveRight:
    ## move the pointer instr.n cells to the right
    add x1, x1, ${instr.n}
  # of MoveLeft:
    ## move the pointer instr.n cells to the left
    sub x1, x1, ${instr.n}
  # of Add:
    ## put the first byte at the pointer into w10 register
    ldrb w10, [x1]
    ## add instr.n to the byte
	  add w10, w10, ${instr.n}
    ## write the changes back into the cell
	  strb w10, [x1]
  # of Sub:
    ldrb w10, [x1]
	  sub w10, w10, ${instr.n}
	  strb w10, [x1]
  # of Write:
    ## put sys_write() (at index 64) in function register
	  mov w8, 64
    ## first arg is the stdout (file descriptor 1)
    mov w0, 1
    ## second arg is the cell pointer, which is already stored in the right register
    ## third arg is the cell size
	  mov w2, 1
    # for n in 1..instr.n:
      ## make the call
      svc 0
    # end for
  # of Read:
    ## put sys_read() (at index 63) in function register
    mov w8, 63
    ## first arg is the stdin (file descriptor 0)
	  mov w0, 0
	  mov w2, 1
    # for n in 1..instr.n:
      svc 0
    # end for
  # of LoopStart:
    ## custom label to indicate the start of a loop
    loop_${i}:
      ldrb w10, [x1]
      ## if w10 == 0, jump to the label corresponding to the end of the loop
      cmp w10, 0
      b.eq loop_${instr.i}
  # of LoopEnd:
    loop_${i}:
      ldrb w10, [x1]
      ## if w10 != 0, jump to the label corresponding to the start of the loop
      cmp w10, 0
      b.ne loop_${instr.i}
# end case
# end method
#
# method writeFooter(self: Arm) =
  ## put sys_exit() (at index 93) in function register
	mov w8, 93
  ## first arg is the exit code
  mov w0, 0
	svc 0
# end method
