#? strip | stdtmpl(emit = "stdout.write")
#
# type X86 = ref object of Compiler
#
# method writeHeader(self: X86) =
  .intel_syntax noprefix

  # case self.platform:
    # of OpenBSD:
      .section ".note.openbsd.ident", "a"
      .align 2
      .long 8, 4, 1
      .ascii "OpenBSD\0"
      .long 0
      .align 2
    # of NetBSD:
      .section ".note.netbsd.ident", "a"
      .long      7,4,1
      .ascii     "NetBSD\0\0"
      .long      200000000
    # else: discard
  # end case

  .data
  cells:
    .space ${cellsLen}

  .text
  .global _start
  _start:
    ## store the pointer to cells in esi register
    lea esi, [rip + cells]
# end method
#
# method writeInstruction(self: X86, instr: Instruction, i: var int) =
# case instr.command:
  # of MoveRight:
    ## move the pointer instr.n cells to the right
    add esi, ${instr.n}
  # of MoveLeft:
    ## move the pointer instr.n cells to the left
    sub esi, ${instr.n}
  # of Add:
	  add byte ptr [esi], ${instr.n}
  # of Sub:
    sub byte ptr [esi], ${instr.n}
  # of Write:
    # for n in 1..instr.n:
      ## put sys_write() in function register
      # case self.platform:
        # of Linux:
          mov ax, 1
        # of OpenBSD, FreeBSD, NetBSD, Illumos:
          mov ax, 4
      # end case
      ## first arg is the stdout (file descriptor 1)
      mov di, 1
      ## second arg is the cell pointer, but it is already stored in the right arg register
      ## third arg is the cell size
      mov dx, 1
      ## make the call
      syscall
    # end for
  # of Read:
    # for n in 1..instr.n:
      ## put sys_read() in function register
      # case self.platform:
        # of Linux:
          mov ax, 0
        # of OpenBSD, FreeBSD, NetBSD, Illumos:
          mov ax, 3
      # end case
      ## first arg is the stdin (file descriptor 0)
      mov di, 0
      mov dx, 1
      syscall
    # end for
  # of LoopStart:
    ## custom label to indicate the start of a loop
    loop_${i}:
      ## if value at esi == 0, jump to the label corresponding to the end of the loop
      cmp byte ptr [esi], 0
      je loop_${instr.i}
  # of LoopEnd:
    loop_${i}:
      ## if value at esi != 0, jump to the label corresponding to the start of the loop
      cmp byte ptr [esi], 0
      jne loop_${instr.i}
# end case
# end method
#
# method writeFooter(self: X86) =
  ## put sys_exit() in ax register
  # case self.platform:
    # of Linux:
	    mov ax, 60
    # of OpenBSD, FreeBSD, NetBSD, Illumos:
	    mov ax, 1
  # end case
  ## first arg is the exit code
  mov di, 0
	syscall
# end method
