#? strip | stdtmpl(emit = "stdout.write")
#
# type RiscV = ref object of Target
# method header(this: RiscV) =
    .data
    cells:
        .space 30000

    .global _start
    _start:
        ## initialize a pointer to cells
        la t0, cells
# end method
#
# method emit(this: RiscV, instr: Instruction, i: var int) =
# case instr.command:
    # of MoveRight:
        ## move the pointer instr.times cells to the right
        addi t0, t0, ${instr.times}
    # of MoveLeft:
        addi t0, t0, ${-instr.times}
    # of Add:
        ## put the first byte at the pointer into t1 register
        lbu t1, (t0)
        ## add instr.times to the byte
        addi t1, t1, ${instr.times}
        ## write the changes back into the cell at the pointer
        sb t1, (t0)
    # of Sub:
        lbu t1, (t0)
        addi t1, t1, ${-instr.times}
        sb t1, (t0)
    # of Write:
        ## put the function 'write'(64) into a7 register
        li a7, 64
        ## first arg is the stdout (file descriptor 1)
        li a0, 1
        ## second arg is the cell pointer
        mv a1, t0
        ## third arg is the cell size
        li a2, 1
        ## execute it instr.times
        # for n in 1..instr.times:
            ecall
        # end for
    # of Read:
        ## put the function 'read' (63) into a7 register
        li a7, 63
        ## first arg is the stdin (file descriptor 0)
        li a0, 0
        mv a1, t0
        li a2, 1
        # for n in 1..instr.times:
            ecall
        # end for
    # of LoopStart:
        ## custom label to indicate the start of a loop
        loop_${i}:
            lbu t1, (t0)
            ## if t1 == 0, jump to the label corresponding to the end of the loop
            beqz t1, loop_${instr.index}
    # of LoopEnd:
        loop_${i}:
            lbu t1, (t0)
            ## if t1 != 0, jump to the label corresponding to the start of the loop
            bnez t1, loop_${instr.index}
# end case
# end method

# method footer(this: RiscV) =
    ## put sys_exit() (at index 93) in a7 register
	li a7, 93
    ## first arg is the exit code
    li a0, 0
    ecall
# end method
